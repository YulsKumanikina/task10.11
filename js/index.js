// —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ñ—É–Ω–∫—Ü–∏–∏ querySelector
const fruitsList = document.querySelector('.fruits__list'); // —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
const shuffleButton = document.querySelector('.shuffle__btn'); // –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
const filterButton = document.querySelector('.filter__btn'); // –∫–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
const sortKindLabel = document.querySelector('.sort__kind'); // –ø–æ–ª–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const sortTimeLabel = document.querySelector('.sort__time'); // –ø–æ–ª–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const sortChangeButton = document.querySelector('.sort__change__btn'); // –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const sortActionButton = document.querySelector('.sort__action__btn'); // –∫–Ω–æ–ø–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const kindInput = document.querySelector('.kind__input'); // –ø–æ–ª–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∏–¥–∞
const colorInput = document.querySelector('.color__input'); // –ø–æ–ª–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ü–≤–µ—Ç–∞
const weightInput = document.querySelector('.weight__input'); // –ø–æ–ª–µ —Å –≤–µ—Å–æ–º
const minWeightInput = document.querySelector('.minweight__input'); // –ø–æ–ª–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤–µ—Å–æ–º
const maxWeightInput = document.querySelector('.maxweight__input'); // –ø–æ–ª–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤–µ—Å–æ–º
const addActionButton = document.querySelector('.add__action__btn'); // –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

// —Å–ø–∏—Å–æ–∫ —Ñ—Ä—É–∫—Ç–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
let fruitsJSON = `[
  {"kind": "–ú–∞–Ω–≥—É—Å—Ç–∏–Ω", "color": "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π", "weight": 13, "borderColor": "violet"},
  {"kind": "–î—É—Ä–∏–∞–Ω", "color": "–∑–µ–ª–µ–Ω—ã–π", "weight": 35, "borderColor": "green"},
  {"kind": "–õ–∏—á–∏", "color": "—Ä–æ–∑–æ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π", "weight": 17, "borderColor": "carmazin"},
  {"kind": "–ö–∞—Ä–∞–º–±–æ–ª–∞", "color": "–∂–µ–ª—Ç—ã–π", "weight": 28, "borderColor": "yellow"},
  {"kind": "–¢–∞–º–∞—Ä–∏–Ω–¥", "color": "—Å–≤–µ—Ç–ª–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π", "weight": 22, "borderColor": "lightbrown"}
]`;

// –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ JSON –≤ –æ–±—ä–µ–∫—Ç JavaScript
let fruits = JSON.parse(fruitsJSON);


/*** –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï ***/

// –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
const display = () => {

  // –æ—á–∏—â–∞–µ–º fruitsList –æ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤,
  const parent = document.querySelector('.fruits__wrapper');
  parent.innerHTML = '<h2 class="wrapper__title">ü•ë –°–ø–∏—Å–æ–∫ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä—É–∫—Ç–æ–≤</h2>';

  // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ fruits
  const ul = document.createElement('ul');
  ul.className = 'fruits__list';
  parent.append(ul);
  
  for (let i = 0; i < fruits.length; i++) {
      
    const li = document.createElement('li');
    li.innerHTML = `<div class="fruit__info"><div>index: ${i} </div><div>kind: ${fruits[i].kind} </div><div>color: ${fruits[i].color} </div><div>weight (–∫–≥):  ${fruits[i].weight} </div></div>`;
    li.className = `fruit__item`;
    if (fruits[i].borderColor.split('')[0] !== '#') {
      li.className = `fruit__item fruit_${fruits[i].borderColor}`;
    } else {
      li.style.background = fruits[i].borderColor;
    }
    ul.appendChild(li); 
  }
}

// –ø–µ—Ä–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
display();

/*** –ü–ï–†–ï–ú–ï–®–ò–í–ê–ù–ò–ï ***/

// –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
const getRandomInt = (min, max) => {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

// –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
const shuffleFruits = () => {

let newArrfruit = [];

while (fruits.length > 0) {
  newArrfruit.push.apply(newArrfruit, (fruits.splice((getRandomInt(0, fruits.length-1)), 1,)));
}

return newArrfruit;
}

shuffleButton.addEventListener('click', () => {
   
  let initFruits = [].concat(fruits); 
  let result = shuffleFruits();
  fruits = result;

  JSON.stringify(result) === JSON.stringify(initFruits) ? alert ('–ü–æ—Ä—è–¥–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!') : display(); // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–∞—Å—Å–∏–≤–æ–º
  
});

/*** –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ***/

// —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞
const filterFruits = () => {
  let min = parseInt(minWeightInput.value);
  let max = parseInt(maxWeightInput.value);
  
  if (min > max || max < min || min == NaN || max == NaN) {
    alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.');
    return 0;
   } else { 
    const weight = fruits.filter(item => item.weight >= min && item.weight <= max);
    return weight;
  }
};

let iFilter = 0;

filterButton.addEventListener('click', () => {
  if (iFilter == 0){
  backupFruits = fruits;
  } else {
  fruits = backupFruits;
  }
  
  fruits = filterFruits();
  fruits.length == 0 ? alert('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ñ—Ä—É–∫—Ç–∞!') : display();
  console.log(iFilter);
  iFilter++;
});

/*** –°–û–†–¢–ò–†–û–í–ö–ê ***/

let sortKind = 'bubbleSort'; // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
let sortTime = '-'; // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏


const colorToNumber = (arr) => {
  let arr_ru = ['–∞', '–±', '–≤', '–≥', '–¥', '–µ', '—ë', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '—Ä', '—Å', '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—ç', '—é', '—è'];
  let arrColor = arr.split('');
  return arr_ru.indexOf(arrColor[0]);
}

const comparationColor = (firstEl, secondEl) => {

  return firstEl > secondEl ? true : false;

};

function swap(arr, i, j){
  let temp = arr[i];
  arr[i] = arr[j];
  arr[j] = temp;
}

function partition(arr, comparation, left, right) {
   var pivot = arr[Math.floor((right + left) / 2)];
       i = left;
       j = right;
   while (i <= j) {
       while (comparation(pivot.numColor, arr[i].numColor)) {
           i++;
       }
       while (comparation(arr[j].numColor, pivot.numColor)) {
           j--;
       }
       if (i <= j) {
           swap(arr, i, j);
           i++;
           j--;
       }
   }
   return i;
  }
  
  const sortAPI = {
    
    bubbleSort(arr, comparation) {
      
    const n = arr.length;
    for (let i = 0; i < n-1; i++) {
      for (let j = 0; j < n-1-i; j++) {
        if (comparation(arr[j].numColor, arr[j+1].numColor)) { 
          swap(arr, j, j+1);
        }
      }
    }
    return arr;                   
  },
  
  quickSort(arr, comparation, left, right) {
    var index;
    if (arr.length > 1) {
      left = typeof left != "number" ? 0 : left; 
      right = typeof right != "number" ? arr.length - 1 : right; 
      index = partition(arr, comparation, left, right); 
      if (comparation(index - 1, left)) {
        sortAPI.quickSort(arr, comparation, left, index - 1);
      }
      if (comparation(right, index)) {
        sortAPI.quickSort(arr, comparation, index, right);
      }
    }
    return arr;
  },
  
  startSort(sort, arr, comparation) {
    const start = new Date().getTime();
    sort(arr, comparation);
    const end = new Date().getTime();
    sortTime = `${end - start} ms`;
  },
};

sortKindLabel.textContent = sortKind;
sortTimeLabel.textContent = sortTime;

sortChangeButton.addEventListener('click', () => {
  sortKind === 'bubbleSort' ? sortKind = 'quickSort' : sortKind = 'bubbleSort';
  sortKindLabel.textContent = sortKind;
  sortTimeLabel.textContent = '-';
});

const numColor = (arr) => {
  for(i=0; i <arr.length; i++){
    arr[i]['numColor'] = colorToNumber(arr[i].color);
  }
};

sortActionButton.addEventListener('click', () => {
  // TODO: –≤—ã–≤–µ—Å—Ç–∏ –≤ sortTimeLabel –∑–Ω–∞—á–µ–Ω–∏–µ 'sorting...'
  sortTimeLabel.textContent = 'sorting...';
  const sort = sortAPI[sortKind];
  numColor(fruits);  // –¥–æ–±–∞–≤–ª—è–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –º–∞—Å—Å–∏–≤
  sortAPI.startSort(sort, fruits, comparationColor);
  display();
  sortTimeLabel.textContent = sortTime;
});

/*** –î–û–ë–ê–í–ò–¢–¨ –§–†–£–ö–¢ ***/
// –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

let input = (input) =>{
  input.addEventListener('input',()=> {
    input.value = input.value.replace(/[^–∞-—è, –ê-–Ø]/,'');
  });
}

input(kindInput);
input(colorInput);

addActionButton.addEventListener('click', () => {
  if (parseInt(weightInput.value) < 0) {
    alert('–ó–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0!');
    weightInput.value = '';
  } else {
    weightInput.value;
  } 
  
  let randomColor ='#' + (Math.random().toString(16) + '000000').substring(2,8);
  
  if (kindInput.value && colorInput.value && weightInput.value) {
    fruits.push({"kind": kindInput.value, "color": colorInput.value, "weight": weightInput.value, "borderColor": randomColor});
    iFilter = 0; // –æ–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞
  } else {
    alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
  }
  display();
});